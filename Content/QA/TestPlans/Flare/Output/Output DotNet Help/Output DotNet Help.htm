<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="716" MadCap:lastWidth="1128" MadCap:fileTags="AuthorFileTagSet.Matthew,Status.Flare V7 Needs Review,Product.Flare">
    <head>
    </head>
    <body>
        <h1>DotNet Help</h1>
        <p class="bold">Bug Base Product Area: </p>
        <ul>
            <li>Output: DotNet Help</li>
        </ul>
        <p>&#160;</p>
        <p class="bold">Description:</p>
        <p>DotNet Help is a Help output format developed by MadCap Software for Windows desktop applications. It was designed to include the best attributes of HTML Help and WebHelp, while filling the holes left behind by those formats. DotNet Help is designed specifically to support Visual Studio 2005 developers. It includes a freely redistributable viewer (MadCap Help Viewer), as well as components for the Visual Studio 2005 developer. These components can be dropped into your Flare project to facilitate context-sensitive Help, embedded Help, and features such as automated search string communication between the application and the DotNet Help documentation.</p>
        <p>&#160;</p>
        <p>The DotNet Help output consists of a collection of files that you will distribute to users with the freely downloadable MadCap Help Viewer. The main entry file has an .mchelp extension.</p>
        <p>&#160;</p>
        <p>DotNet Help is a good choice if:</p>
        <ul>
            <li>You need a format that supports .NET applications.</li>
            <li>You want to produce a customizable interface that is much more modern looking than the aging HTML Help. It will blend easily into a modern Vista environment.</li>
            <li>You want users to be able to select between multiple languages for the interface when viewing your output. This is possible because the freely distributable MadCap Help Viewer lets users select English, French, German, or Japanese for the interface.</li>
            <li>You do not want users to be burdened by the security warnings and limitations that are often encountered with HTML Help and WebHelp.</li>
            <li>You need to include features that are not available with HTML Help.</li>
            <li>You want to create embedded context-sensitive Help in a .NET application. This includes the ability to produce Dynamic Help.</li>
            <li>You want to include search functionality that supports wildcard searches.</li>
        </ul>
        <p>&#160;</p>
        <p class="bold">Test Plans:</p>
        <ul>
            <li>
                <MadCap:xref href="Output DotNet Help - UI.htm" class="TitleOnly">Output DotNet Help - UI</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="Output DotNet Help - Command Line.htm" class="TitleOnly">Output DotNet Help - Command Line</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="Output DotNet Help - Output Files.htm" class="TitleOnly">Output DotNet Help - Output Files</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="Output DotNet Help - Output Feature Checklist.htm" class="TitleOnly">Output DotNet Help - Output Feature Checklist</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="Output DotNet Help - Baseline.htm" class="TitleOnly">Output DotNet Help - Baseline</MadCap:xref>
            </li>
        </ul>
        <p>&#160;</p>
        <p class="bold">Dependencies:</p>
        <ul>
            <li>DotNet Help Viewer</li>
        </ul>
        <p>&#160;</p>
        <p class="bold">Testing Resources (Copy all files to local Machine before importing):</p>
        <ul>
            <li>None</li>
        </ul>
        <p>&#160;</p>
        <p class="bold">Notes and things to add to the testing resources:</p>
        <ul>
            <li>quicksearch not working if you change to a different topic</li>
            <li style="text-decoration: none;">cmd line compile generating extra .flinks in the temp folder</li>
        </ul>
        <p>&#160;</p>
        <p>&#160;</p>
    </body>
</html>